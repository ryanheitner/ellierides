package org.rh.util; 
/**
 *               DO WHAT YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 *            DO WHAT YOU WANT TO PUBLIC LICENSE
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT YOU WANT TO.
 */

import android.content.Context;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.widget.TextView;

import org.rh.ellierides.Constant;

/**
 * Text view that auto adjusts text size to fit within the view.
 * If the text size equals the minimum text size and still does not
 * fit, append with an ellipsis.
 *
 * @author Chase Colburn
 * @since Apr 4, 2011
 */
public class AutoSizeFontTextView extends TextView {
    public AutoSizeFontTextView(Context context) {
        super(context);
    }

    public AutoSizeFontTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public AutoSizeFontTextView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
            int widthLimit = (right - left) - getCompoundPaddingLeft() - getCompoundPaddingRight();
            int heightLimit = (bottom - top) - getCompoundPaddingBottom() - getCompoundPaddingTop();
            resizeText(widthLimit, heightLimit);
            Log.d(Constant.TAG,"Bottom:" + bottom);
            super.onLayout(changed, left, top, right, bottom);
    }


    /**
     * Resize the text size with specified width and height
     * @param width
     * @param height
     */
    public void resizeText(int width, int height) {
        float mTextSize = getTextSize();
        CharSequence text = getText();
        // Do not resize if the view does not have dimensions or there is no text
        if(text == null || text.length() == 0 || height <= 0 || width <= 0 || mTextSize == 0) {
            return;
        }

        // Get the text view's paint object
        TextPaint textPaint = getPaint();
        TextPaint paint = new TextPaint(textPaint);

        float targetTextSize =  mTextSize;
        // Get the required text height
        int textHeight = getTextHeight(text, textPaint, width, targetTextSize);

        // Until we either fit within our text view or we had reached our min text size, incrementally try smaller sizes
        while(textHeight > height && targetTextSize > 1) {
            targetTextSize = Math.max(targetTextSize - 1, 1);
            textHeight = getTextHeight(text, textPaint, width, targetTextSize);
        }

        // Some devices try to auto adjust line spacing, so force default line spacing
        // and invalidate the layout as a side effect
        textPaint.setTextSize(targetTextSize);
        setLineSpacing(0.0f, 1.0f);

    }

    // Set the text size of the text paint object and use a static layout to render text off screen before measuring
    private int getTextHeight(CharSequence source, TextPaint originalPaint, int width, float textSize) {
        TextPaint paint = new TextPaint(originalPaint);        // Update the text paint object
        // Update the text paint object
        paint.setTextSize(textSize);
        // Measure using a static layout
        StaticLayout layout = new StaticLayout(source, paint, width, Alignment.ALIGN_NORMAL, 0.0f, 1.0f, true);
        return layout.getHeight();
    }

}


result = {android.text.TextPaint@830035990944}
drawableState = null
bgColor = 0
density = 1.3312501
baselineShift = 0
linkColor = -13388315
underlineColor = 0
underlineThickness = 0.0
mXfermode = null
mTypeface = null
mColorFilter = null
mShader = null
mRasterizer = null
mPathEffect = null
mLocale = {java.util.Locale@830035904984}"en_GB"
mMaskFilter = null
mNativePaint = 1098036600
mInvCompatScaling = 1.0
mHasCompatScaling = false
mCompatScaling = 1.0
mBidiFlags = 2
hasShadow = false
shadowColor = 0
shadowDx = 0.0
shadowDy = 0.0
shadowRadius = 0.0